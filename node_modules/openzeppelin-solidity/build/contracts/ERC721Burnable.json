{
  "contractName": "ERC721Burnable",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a7146100b4578063081812fc14610126578063095ea7b3146101a157806323b872dd146101fc57806342842e0e1461027757806342966c68146102f25780636352211e1461032d57806370a08231146103a8578063a22cb4651461040d578063b88d4fde1461046a578063e985e9c51461057c575b600080fd5b3480156100c057600080fd5b5061010c600480360360208110156100d757600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610605565b604051808215151515815260200191505060405180910390f35b34801561013257600080fd5b5061015f6004803603602081101561014957600080fd5b810190808035906020019092919050505061066c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ad57600080fd5b506101fa600480360360408110156101c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106bd565b005b34801561020857600080fd5b506102756004803603606081101561021f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610802565b005b34801561028357600080fd5b506102f06004803603606081101561029a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610827565b005b3480156102fe57600080fd5b5061032b6004803603602081101561031557600080fd5b8101908080359060200190929190505050610848565b005b34801561033957600080fd5b506103666004803603602081101561035057600080fd5b8101908080359060200190929190505050610869565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b457600080fd5b506103f7600480360360208110156103cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108e7565b6040518082815260200191505060405180910390f35b34801561041957600080fd5b506104686004803603604081101561043057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061096b565b005b34801561047657600080fd5b5061057a6004803603608081101561048d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156104f457600080fd5b82018360208201111561050657600080fd5b8035906020019184600183028401116401000000008311171561052857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610aa7565b005b34801561058857600080fd5b506105eb6004803603604081101561059f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610acf565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b600061067782610b63565b151561068257600080fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106c882610869565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561070557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061074557506107448133610acf565b5b151561075057600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b61080c3382610bd5565b151561081757600080fd5b610822838383610c6a565b505050565b6108438383836020604051908101604052806000815250610aa7565b505050565b6108523382610bd5565b151561085d57600080fd5b61086681610ecf565b50565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156108de57600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561092457600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156109a657600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b610ab2848484610802565b610abe84848484610ee4565b1515610ac957600080fd5b50505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600080610be183610869565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610c5057508373ffffffffffffffffffffffffffffffffffffffff16610c388461066c565b73ffffffffffffffffffffffffffffffffffffffff16145b80610c615750610c608185610acf565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610c8a82610869565b73ffffffffffffffffffffffffffffffffffffffff16141515610cac57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610ce857600080fd5b610cf181611107565b610d446001600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111c790919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dda6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e990919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b610ee1610edb82610869565b8261120a565b50565b6000610f058473ffffffffffffffffffffffffffffffffffffffff1661139e565b1515610f1457600190506110ff565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561100b578082015181840152602081019050610ff0565b50505050905090810190601f1680156110385780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561105a57600080fd5b505af115801561106e573d6000803e3d6000fd5b505050506040513d602081101561108457600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156111c45760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60008282111515156111d857600080fd5b600082840390508091505092915050565b600080828401905083811015151561120057600080fd5b8091505092915050565b8173ffffffffffffffffffffffffffffffffffffffff1661122a82610869565b73ffffffffffffffffffffffffffffffffffffffff1614151561124c57600080fd5b61125581611107565b6112a86001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111c790919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b90506000811191505091905056fea165627a7a72305820620c7c658f25ca1fe9870ca7bc1b2d071d7e44be328f8f3554707bf3db1519490029",
  "sourceMap": "155:295:50:-;;;639:39:27;235:10;658:19;;639:18;;;:39;;;:::i;:::-;1905::49;1162:10;1924:19;;1905:18;;;:39;;;:::i;:::-;155:295:50;;988:158:27;1078:10;1063:25;;:11;:25;;;;;1055:34;;;;;;;;1135:4;1099:20;:33;1120:11;1099:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;988:158;:::o;155:295:50:-;;;;;;;",
  "deployedSourceMap": "155:295:50:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;776:133:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;776:133:27;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;776:133:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3703:151:49;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3703:151:49;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3703:151:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3126:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3126:292:49;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3126:292:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5258:180;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5258:180:49;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5258:180:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6077:181;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6077:181:49;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6077:181:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:127:50;;8:9:-1;5:2;;;30:1;27;20:12;5:2;321:127:50;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;321:127:50;;;;;;;;;;;;;;;;;;;;2528:177:49;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2528:177:49;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2528:177:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2154:150:49;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2154:150:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4146:213;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4146:213:49;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4146:213:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6963:260;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6963:260:49;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;6963:260:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6963:260:49;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6963:260:49;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6963:260:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6963:260:49;;;;;;;;;;;;;;;;;;4680:145;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4680:145:49;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4680:145:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;776:133:27;846:4;869:20;:33;890:11;869:33;;;;;;;;;;;;;;;;;;;;;;;;;;;862:40;;776:133;;;:::o;3703:151:49:-;3762:7;3789:16;3797:7;3789;:16::i;:::-;3781:25;;;;;;;;3823:15;:24;3839:7;3823:24;;;;;;;;;;;;;;;;;;;;;3816:31;;3703:151;;;:::o;3126:292::-;3189:13;3205:16;3213:7;3205;:16::i;:::-;3189:32;;3245:5;3239:11;;:2;:11;;;;3231:20;;;;;;;;3283:5;3269:19;;:10;:19;;;:58;;;;3292:35;3309:5;3316:10;3292:16;:35::i;:::-;3269:58;3261:67;;;;;;;;3366:2;3339:15;:24;3355:7;3339:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;3403:7;3399:2;3383:28;;3392:5;3383:28;;;;;;;;;;;;3126:292;;;:::o;5258:180::-;5348:39;5367:10;5379:7;5348:18;:39::i;:::-;5340:48;;;;;;;;5399:32;5413:4;5419:2;5423:7;5399:13;:32::i;:::-;5258:180;;;:::o;6077:181::-;6212:39;6229:4;6235:2;6239:7;6212:39;;;;;;;;;;;;;:16;:39::i;:::-;6077:181;;;:::o;321:127:50:-;377:39;396:10;408:7;377:18;:39::i;:::-;369:48;;;;;;;;427:14;433:7;427:5;:14::i;:::-;321:127;:::o;2528:177:49:-;2583:7;2602:13;2618:11;:20;2630:7;2618:20;;;;;;;;;;;;;;;;;;;;;2602:36;;2673:1;2656:19;;:5;:19;;;;2648:28;;;;;;;;2693:5;2686:12;;;2528:177;;;:::o;2154:150::-;2209:7;2253:1;2236:19;;:5;:19;;;;2228:28;;;;;;;;2273:17;:24;2291:5;2273:24;;;;;;;;;;;;;;;;2266:31;;2154:150;;;:::o;4146:213::-;4231:10;4225:16;;:2;:16;;;;4217:25;;;;;;;;4289:8;4252:18;:30;4271:10;4252:30;;;;;;;;;;;;;;;:34;4283:2;4252:34;;;;;;;;;;;;;;;;:45;;;;;;;;;;;;;;;;;;4339:2;4312:40;;4327:10;4312:40;;;4343:8;4312:40;;;;;;;;;;;;;;;;;;;;;;4146:213;;:::o;6963:260::-;7069:31;7082:4;7088:2;7092:7;7069:12;:31::i;:::-;7167:48;7190:4;7196:2;7200:7;7209:5;7167:22;:48::i;:::-;7159:57;;;;;;;;6963:260;;;;:::o;4680:145::-;4760:4;4783:18;:25;4802:5;4783:25;;;;;;;;;;;;;;;:35;4809:8;4783:35;;;;;;;;;;;;;;;;;;;;;;;;;4776:42;;4680:145;;;;:::o;7412:152::-;7469:4;7485:13;7501:11;:20;7513:7;7501:20;;;;;;;;;;;;;;;;;;;;;7485:36;;7555:1;7538:19;;:5;:19;;;;7531:26;;;7412:152;;;:::o;7927:404::-;8012:4;8028:13;8044:16;8052:7;8044;:16::i;:::-;8028:32;;8247:5;8236:16;;:7;:16;;;:51;;;;8280:7;8256:31;;:20;8268:7;8256:11;:20::i;:::-;:31;;;8236:51;:87;;;;8291:32;8308:5;8315:7;8291:16;:32::i;:::-;8236:87;8228:96;;;7927:404;;;;:::o;10073:402::-;10186:4;10166:24;;:16;10174:7;10166;:16::i;:::-;:24;;;10158:33;;;;;;;;10223:1;10209:16;;:2;:16;;;;10201:25;;;;;;;;10237:23;10252:7;10237:14;:23::i;:::-;10297:30;10325:1;10297:17;:23;10315:4;10297:23;;;;;;;;;;;;;;;;:27;;:30;;;;:::i;:::-;10271:17;:23;10289:4;10271:23;;;;;;;;;;;;;;;:56;;;;10361:28;10387:1;10361:17;:21;10379:2;10361:21;;;;;;;;;;;;;;;;:25;;:28;;;;:::i;:::-;10337:17;:21;10355:2;10337:21;;;;;;;;;;;;;;;:52;;;;10423:2;10400:11;:20;10412:7;10400:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;10460:7;10456:2;10441:27;;10450:4;10441:27;;;;;;;;;;;;10073:402;;;:::o;9609:90::-;9660:32;9666:16;9674:7;9666;:16::i;:::-;9684:7;9660:5;:32::i;:::-;9609:90;:::o;10998:335::-;11111:4;11132:15;:2;:13;;;:15::i;:::-;11131:16;11127:58;;;11170:4;11163:11;;;;11127:58;11195:13;11227:2;11211:36;;;11248:10;11260:4;11266:7;11275:5;11211:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11211:70:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11211:70:49;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11211:70:49;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11211:70:49;;;;;;;;;;;;;;;;11195:86;;658:10;11309:16;;11299:26;;;:6;:26;;;;11291:35;;;10998:335;;;;;;;:::o;11494:171::-;11593:1;11557:38;;:15;:24;11573:7;11557:24;;;;;;;;;;;;;;;;;;;;;:38;;;;11553:106;;;11646:1;11611:15;:24;11627:7;11611:24;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;11553:106;11494:171;:::o;2278:145:32:-;2336:7;2368:1;2363;:6;;2355:15;;;;;;;;2380:9;2396:1;2392;:5;2380:17;;2415:1;2408:8;;;2278:145;;;;:::o;2761:::-;2819:7;2838:9;2854:1;2850;:5;2838:17;;2878:1;2873;:6;;2865:15;;;;;;;;2898:1;2891:8;;;2761:145;;;;:::o;9125:305:49:-;9219:5;9199:25;;:16;9207:7;9199;:16::i;:::-;:25;;;9191:34;;;;;;;;9236:23;9251:7;9236:14;:23::i;:::-;9297:31;9326:1;9297:17;:24;9315:5;9297:24;;;;;;;;;;;;;;;;:28;;:31;;;;:::i;:::-;9270:17;:24;9288:5;9270:24;;;;;;;;;;;;;;;:58;;;;9369:1;9338:11;:20;9350:7;9338:20;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;9415:7;9411:1;9387:36;;9396:5;9387:36;;;;;;;;;;;;9125:305;;:::o;463:624:63:-;523:4;539:12;1046:7;1034:20;1026:28;;1079:1;1072:4;:8;1065:15;;;463:624;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./ERC721.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\ncontract ERC721Burnable is ERC721 {\n    /**\n     * @dev Burns a specific ERC721 token.\n     * @param tokenId uint256 id of the ERC721 token to be burned.\n     */\n    function burn(uint256 tokenId) public {\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n        _burn(tokenId);\n    }\n}\n",
  "sourcePath": "/home/frangio/zs/oz/sol/master/contracts/token/ERC721/ERC721Burnable.sol",
  "ast": {
    "absolutePath": "/home/frangio/zs/oz/sol/master/contracts/token/ERC721/ERC721Burnable.sol",
    "exportedSymbols": {
      "ERC721Burnable": [
        5875
      ]
    },
    "id": 5876,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5853,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:50"
      },
      {
        "absolutePath": "/home/frangio/zs/oz/sol/master/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 5854,
        "nodeType": "ImportDirective",
        "scope": 5876,
        "sourceUnit": 5852,
        "src": "25:22:50",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5855,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 5851,
              "src": "182:6:50",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$5851",
                "typeString": "contract ERC721"
              }
            },
            "id": 5856,
            "nodeType": "InheritanceSpecifier",
            "src": "182:6:50"
          }
        ],
        "contractDependencies": [
          2887,
          3034,
          5851,
          6616
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721 Burnable Token\n@dev ERC721 Token that can be irreversibly burned (destroyed).",
        "fullyImplemented": true,
        "id": 5875,
        "linearizedBaseContracts": [
          5875,
          5851,
          6616,
          2887,
          3034
        ],
        "name": "ERC721Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 5873,
              "nodeType": "Block",
              "src": "359:89:50",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 5863,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6842,
                              "src": "396:3:50",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 5864,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "396:10:50",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 5865,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5858,
                            "src": "408:7:50",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 5862,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5615,
                          "src": "377:18:50",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view returns (bool)"
                          }
                        },
                        "id": 5866,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "377:39:50",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 5861,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        6845,
                        6846
                      ],
                      "referencedDeclaration": 6845,
                      "src": "369:7:50",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 5867,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "369:48:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5868,
                  "nodeType": "ExpressionStatement",
                  "src": "369:48:50"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 5870,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5858,
                        "src": "433:7:50",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 5869,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5710,
                        5723
                      ],
                      "referencedDeclaration": 5723,
                      "src": "427:5:50",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 5871,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "427:14:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5872,
                  "nodeType": "ExpressionStatement",
                  "src": "427:14:50"
                }
              ]
            },
            "documentation": "@dev Burns a specific ERC721 token.\n@param tokenId uint256 id of the ERC721 token to be burned.",
            "id": 5874,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5859,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5858,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 5874,
                  "src": "335:15:50",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5857,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "335:7:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "334:17:50"
            },
            "returnParameters": {
              "id": 5860,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "359:0:50"
            },
            "scope": 5875,
            "src": "321:127:50",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 5876,
        "src": "155:295:50"
      }
    ],
    "src": "0:451:50"
  },
  "legacyAST": {
    "absolutePath": "/home/frangio/zs/oz/sol/master/contracts/token/ERC721/ERC721Burnable.sol",
    "exportedSymbols": {
      "ERC721Burnable": [
        5875
      ]
    },
    "id": 5876,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5853,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:50"
      },
      {
        "absolutePath": "/home/frangio/zs/oz/sol/master/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 5854,
        "nodeType": "ImportDirective",
        "scope": 5876,
        "sourceUnit": 5852,
        "src": "25:22:50",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5855,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 5851,
              "src": "182:6:50",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$5851",
                "typeString": "contract ERC721"
              }
            },
            "id": 5856,
            "nodeType": "InheritanceSpecifier",
            "src": "182:6:50"
          }
        ],
        "contractDependencies": [
          2887,
          3034,
          5851,
          6616
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721 Burnable Token\n@dev ERC721 Token that can be irreversibly burned (destroyed).",
        "fullyImplemented": true,
        "id": 5875,
        "linearizedBaseContracts": [
          5875,
          5851,
          6616,
          2887,
          3034
        ],
        "name": "ERC721Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 5873,
              "nodeType": "Block",
              "src": "359:89:50",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 5863,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6842,
                              "src": "396:3:50",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 5864,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "396:10:50",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 5865,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5858,
                            "src": "408:7:50",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 5862,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5615,
                          "src": "377:18:50",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view returns (bool)"
                          }
                        },
                        "id": 5866,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "377:39:50",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 5861,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        6845,
                        6846
                      ],
                      "referencedDeclaration": 6845,
                      "src": "369:7:50",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 5867,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "369:48:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5868,
                  "nodeType": "ExpressionStatement",
                  "src": "369:48:50"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 5870,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5858,
                        "src": "433:7:50",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 5869,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5710,
                        5723
                      ],
                      "referencedDeclaration": 5723,
                      "src": "427:5:50",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 5871,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "427:14:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5872,
                  "nodeType": "ExpressionStatement",
                  "src": "427:14:50"
                }
              ]
            },
            "documentation": "@dev Burns a specific ERC721 token.\n@param tokenId uint256 id of the ERC721 token to be burned.",
            "id": 5874,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5859,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5858,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 5874,
                  "src": "335:15:50",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5857,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "335:7:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "334:17:50"
            },
            "returnParameters": {
              "id": 5860,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "359:0:50"
            },
            "scope": 5875,
            "src": "321:127:50",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 5876,
        "src": "155:295:50"
      }
    ],
    "src": "0:451:50"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.0",
  "updatedAt": "2018-12-27T20:52:51.133Z",
  "devdoc": {
    "details": "ERC721 Token that can be irreversibly burned (destroyed).",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "burn(uint256)": {
        "details": "Burns a specific ERC721 token.",
        "params": {
          "tokenId": "uint256 id of the ERC721 token to be burned."
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "owner address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "ERC721 Burnable Token"
  },
  "userdoc": {
    "methods": {}
  }
}